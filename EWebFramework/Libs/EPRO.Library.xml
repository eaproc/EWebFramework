<?xml version="1.0"?>
<doc>
<assembly>
<name>
EPRO.Library
</name>
</assembly>
<members>
<member name="T:EPRO.Library.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:EPRO.Library.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:EPRO.Library.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:EPRO.Library.AppConfigurations.CSVReader.#ctor(System.String,System.StringSplitOptions,System.String,System.String)">
 <summary>
 Uses ANSII - WINDOWS  Encoding.  System.Text.Encoding.Default
 </summary>
 <param name="csvFilePath"></param>
 <param name="RowDelimiters"></param>
 <param name="CellDelimiter"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.CSVReader.#ctor(System.String,System.String,System.String)">
 <summary>
 Uses ANSII - WINDOWS  Encoding.  System.Text.Encoding.Default. Removes empty cells 
 </summary>
 <param name="csvFilePath"></param>
 <param name="RowDelimiters"></param>
 <param name="CellDelimiter"></param>
 <remarks></remarks>
</member>
<member name="P:EPRO.Library.AppConfigurations.CSVReader.IsValid">
 <summary>
 Checks only if file is valid. Use has rows to know if the file contains data
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.Text.Encoding,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Reads Ini File.
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="KeyVDelimiter">The key value delimiter like Equals sign [ = ]</param>
 <param name="LineVDelimiter">The Line delimiter or Entry delimiter like New Line [ \n ]</param>
 <param name="pisCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Reads Ini File. Uses ANSII - WINDOWS  Encoding.  System.Text.Encoding.Default
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="KeyVDelimiter">The key value delimiter like Equals sign [ = ]</param>
 <param name="LineVDelimiter">The Line delimiter or Entry delimiter like New Line [ \n ]</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Boolean)">
 <summary>
 Reads Ini File.
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.Boolean,System.Boolean)">
 <summary>
 Reads Ini File. Uses ANSII - WINDOWS  Encoding.  System.Text.Encoding.Default
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
 <summary>
 Reads Ini File. Uses ANSII - WINDOWS  Encoding.  System.Text.Encoding.Default
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="KeyVDelimiter">The key value delimiter like Equals sign [ = ]</param>
 <param name="LineVDelimiter">The Line delimiter or Entry delimiter like New Line [ \n ]</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <param name="IgnoreSpecialComments">Entries of Special Comments Starter lines like REM. Semi-colon ; </param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.Text.Encoding,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
 <summary>
 Reads Ini File
 </summary>
 <param name="iniFilePath">The Ini File to read</param>
 <param name="KeyVDelimiter">The key value delimiter like Equals sign [ = ]</param>
 <param name="LineVDelimiter">The Line delimiter or Entry delimiter like New Line [ \n ]</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <param name="IgnoreSpecialComments">Entries of Special Comments Starter lines like REM. Semi-colon ; </param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.IniReader.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
 <summary>
 Reads Ini File
 </summary>
 <param name="iniFileContents">Parse the contents of ini file to read</param>
 <param name="KeyVDelimiter">The key value delimiter like Equals sign [ = ]</param>
 <param name="LineVDelimiter">The Line delimiter or Entry delimiter like New Line [ \n ]</param>
 <param name="isCaseSensitive">Indicate if fetching result will be case sensitive</param>
 <param name="IgnoreSpecialComments">Entries of Special Comments Starter lines like REM. Semi-colon ; </param>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.AppConfigurations.IniReader.SECTION__NAME___SEPERATOR">
 <summary>
 It is use to identify sections if Identify Sections was indicated
 </summary>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.AppConfigurations.SimpleXMLReader">
 <summary>
 Purpose of this class is to read an XML value without error. Regardless of the arrangement of the elements.
 Please note that XML tag are case sensitive
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.SimpleXMLReader.getElementsByTagName(System.String)">
 <summary>
 Returns all occurrences of this TagElements
 </summary>
 <param name="pTagName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.SimpleXMLReader.getElementByTagName(System.String)">
 <summary>
 get first occurence of this element
 </summary>
 <param name="pTagName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.AppConfigurations.VersionControlSystem">
 <summary>
 Manages Versions in Major.Minor.Revision.Build at Same Sizes
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.String,System.Byte)">
 <summary>
 Parse in already created Version String
 </summary>
 <param name="vcs"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.String,System.Byte,System.Boolean)">
 <summary>
 Parse in already created Version String
 </summary>
 <param name="vcs"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.Byte,System.Boolean,System.String)">
 <summary>
 Create an empty version 0.0.0.0
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.Byte,System.Boolean)">
 <summary>
 Create an empty version 0.0.0.0
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.String,System.Byte,System.Boolean,System.String)">
 <summary>
 Parse in already created Version String
 </summary>
 <param name="vcs"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.String)">
 <summary>
 Parse in already created Version String
 </summary>
 <param name="vcs"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Byte)">
 <summary>
 
 </summary>
 <param name="___Major"></param>
 <param name="___Minor"></param>
 <param name="___Revision"></param>
 <param name="___Build"></param>
 <param name="vcsSize">Maximum is 12 and Minimum is 1</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Byte,System.Boolean)">
 <summary>
 
 </summary>
 <param name="___Major"></param>
 <param name="___Minor"></param>
 <param name="___Revision"></param>
 <param name="___Build"></param>
 <param name="vcsSize">Maximum is 12 and Minimum is 1</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Byte,System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="___Major"></param>
 <param name="___Minor"></param>
 <param name="___Revision"></param>
 <param name="___Build"></param>
 <param name="vcsSize">Maximum is 12 and Minimum is 1</param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.Load(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Byte,System.Boolean,System.String)">
 <summary>
 Proxy Load
 </summary>
 <param name="___Major"></param>
 <param name="___Minor"></param>
 <param name="___Revision"></param>
 <param name="___Build"></param>
 <param name="vcsSize"></param>
 <param name="PadOutputWIthZeros"></param>
 <param name="___VersionDelimiter"></param>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.AppConfigurations.VersionControlSystem.MAXIMUM_VCS_SIZE">
 <summary>
 Maximum Length of each component like Major Size 3 will be 999 maximum value
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.Increase">
 <summary>
 Increase this Current Version. Thread Safe. Throws Exception(MaxReach)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.IncreaseComponentPart(System.UInt64@)">
 <summary>
 returns false if it is at maximum already. So pass one up
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.ToString">
 <summary>
 Returns Version as string
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.Equals(System.Object)">
 <summary>
 Confirms if it is same version regardless of it's version size
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.IsGreaterThan(EPRO.Library.AppConfigurations.VersionControlSystem)">
 <summary>
 Confirms if this version is greater than the other
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.AppConfigurations.VersionControlSystem.NormalizeStringVersion(System.String,System.Byte,System.Boolean,System.String)">
 <summary>
 Helps to reduce string to needed size. trimming version string. 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.RemoveAccountFromFolder(System.String,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 Using Installed OSCulture
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFolderPath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.RemoveAccountFromFolder(System.String,EPRO.Library.MicrosoftOS.PCAccountNames,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFolderPath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.AddAccountToFolder(System.String,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 Using Installed OSCulture
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFolderPath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.AddAccountToFolder(System.String,EPRO.Library.MicrosoftOS.PCAccountNames,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFolderPath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.AddAccountToFile(System.String,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 Using Installed OSCulture
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFilePath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.AddAccountToFile(System.String,EPRO.Library.MicrosoftOS.PCAccountNames,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFilePath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.RemoveAccountFromFile(System.String,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 Using Installed OSCulture
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFilePath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.FileSystemSecurity.RemoveAccountFromFile(System.String,EPRO.Library.MicrosoftOS.PCAccountNames,EPRO.Library.MicrosoftOS.PCAccountNames.AccountNames)">
 <summary>
 NB: This does not handle errors like File or Folder NOT Found
 </summary>
 <param name="pFilePath"></param>
 <param name="pAccount"></param>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.InputsParsing.FrenchTextParsing.DOT">
 <summary>
 . in Ascii is 46
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.InputsParsing.FrenchTextParsing.PLUS_SIGN">
 <summary>
 For phone numbers
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.FrenchTextParsing.parseOutDouble(System.String)">
 <summary>
 Parse out double from string. reading to the last char
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.FrenchTextParsing.parseOutDoubleAsString(System.String)">
 <summary>
 Parse out double from string. reading to the last char
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.InputsParsing.TextParsing.DOT">
 <summary>
 . in Ascii is 46
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.InputsParsing.TextParsing.PLUS_SIGN">
 <summary>
 For phone numbers
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.IsSymbol(System.Char)">
 <summary>
 Currently this isn't perfect on Other Encoding Apart from ASCII because any char not ASCII letters, 
 numbers, space, non readable are considered symbols. Therefore, other special chars too are symbols
 </summary>
 <param name="c"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.IsNonReadableCharacter(System.Char)">
 <summary>
 Includes Tabs and Enter Keys. Use this if you want to allow Tabs and Enter Keys
 </summary>
 <param name="c"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.IsNonReadableCharacterExceptTabsAndEnterKey(System.Char)">
 <summary>
 without counting 9,10,11,13 [Tabs and Enter Keys]. You can use this if you don't want to allow those stuff
 </summary>
 <param name="c"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.IsTabsAndEnterKeys(System.Char)">
 <summary>
 Returns if this is enter key or tab
 </summary>
 <param name="c"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.parseOutIntegers(System.String)">
 <summary>
 Parse out all numbers from the left of a string
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.parseOutDouble(System.String)">
 <summary>
 Parse out double from string. reading to the last char
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.InputsParsing.TextParsing.parseOutDoubleAsString(System.String)">
 <summary>
 Parse out double from string. reading to the last char
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.ISerializableImplementation.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Mark the class [ Serializable() _ ]. Also implement Protected Sub New(info,context) call Deserialize(info,context) 
 info.getValue() as you used info.addValue() under serialization
 </summary>
 <param name="info"></param>
 <param name="context"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Objects.EDecimal">
 <summary>
 Decimal is smaller in range but has more accuracy than double
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDecimal.valueOf(System.String)">
 <summary>
 Converts An Object to Double
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDecimal.valueOf(System.Object)">
 <summary>
 Converts objects to double
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.String)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.DBNull)">
 <summary>
 Converts An Object to short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Double)">
 <summary>
 Converts An Object to Short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Decimal)">
 <summary>
 Converts An Object to Short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Int32)">
 <summary>
 Converts An Object to Short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Int64)">
 <summary>
 Converts An Object to Short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Boolean)">
 <summary>
 Converts boolean to short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EShort.valueOf(System.Object)">
 <summary>
 Converts objects to short
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.CombineArrays``1(System.Collections.Generic.List{``0}[])">
 <summary>
 Join Arrays of the same types
 </summary>
 <typeparam name="T"></typeparam>
 <param name="arrys"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.GetNextElementInArray(System.String,System.String,System.String)">
 <summary>
 Get Next Item in Array to CurrentItem. If current item=last item, return first element.
 </summary>
 <param name="strElements"></param>
 <param name="CurrentItem">If current item is not found, returns first item</param>
 <param name="Delimiter">Default is Comma(,)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.Search_in_Array(System.String[0:,0:],System.String,System.Boolean)">
 <summary>
 Search array first column in 2 dimaensional array. Item is Exact
 </summary>
 <param name="strArray"></param>
 <param name="strSearch"></param>
 <param name="DirectCastEqualsTheValueNotInstr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.Search_in_Array(System.String[0:,0:],System.String)">
 <summary>
 Search array first column in 2 dimaensional array. Item Contains
 </summary>
 <param name="strArray"></param>
 <param name="strSearch"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.Search_in_Array(System.String[],System.String,System.Boolean)">
 <summary>
 Indicates a Search in Array of Lines where the WHOLE Line must be equal to the String For Searching. It returns ONLY First INDEX
 </summary>
 <param name="strArray"></param>
 <param name="strSearch"></param>
 <param name="DirectCastEqualsTheValueNotInstr">Just Set to True, If you want this type of Search. 
 Otherwise, Set to False Which Indicates ONLY part of the line is equal to the String For Searching</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.Search_in_Array(System.String[],System.String)">
 <summary>
 Search through lines of array for a word string. If the word is contained in a line, it returns the line index [First Index]
 </summary>
 <param name="strArray">Lines (Of String) array</param>
 <param name="strSearch">String to search</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.Search_in_Array(System.String[],System.String,EPRO.Library.Objects.EArrays.SearchArrays)">
 <summary>
 Search through lines of array for a word string. If the word is contained in a line, it returns the line index. Select Which Index [First, Last ...]
 </summary>
 <param name="strArray">Lines (Of String) array</param>
 <param name="strSearch">String to search</param>
 <param name="IndexType">Indicates Which Index you want? If First Discovered or Last ....</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Objects.EArrays.SearchArrays">
 <summary>
 Use to indicate which index user wants
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.GetOneDimension``1(``0[0:,0:])">
 <summary>
 Returns first column
 </summary>
 <typeparam name="T"></typeparam>
 <param name="TwoDimension"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EArrays.getArrayCopy``1(``0[])">
 <summary>
 Get a copy of array .. Not pointing to same memory address
 </summary>
 <param name="arr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Objects.EDouble">
 <summary>
 Double is larger in range represented but with lower accuracy than decimal
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDouble.valueOf(System.String)">
 <summary>
 Converts An Object to Double
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDouble.valueOf(System.Object)">
 <summary>
 Converts objects to double
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Objects.EStrings">
 <summary>
 Controls the String Class
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EStrings.QUOTE">
 <summary>
 For quotation mark
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.valueOf(System.DBNull)">
 <summary>
 Converts DBNUll to System.String.Empty()
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.valueOf(System.Object)">
 <summary>
 Converts Objects to String. Returns System.String.Empty() if it is nothing
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.equalsIgnoreCase(System.String,System.String)">
 <summary>
 Checks if String1 equals String2 Ignoring the Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.LikeIgnoreCase(System.String,System.String)">
 <summary>
 Checks if String2 is in String1 Ignoring the Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.Like(System.String,System.String)">
 <summary>
 Checks if String2 is in String1 Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.isEmpty(System.String)">
 <summary>
 Checks absolutely if a string is empty
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.RemoveAllSpaces(System.String)">
 <summary>
 Replaces the occurrence of space in the string with NULL
 </summary>
 <param name="strExpression"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.QuoteString(System.String)">
 <summary>
 Quote String. Sample Man ==> "Man"
 </summary>
 <param name="Expression"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.WrapUpAtLeast(System.String,System.Int32,System.Char,System.Boolean)">

 <summary>
  If Original Length is Greater Than The Specified Length,
     It returns the same string
  Otherwise, if less than, String is buffered with specified character. Same Function as String.PadLeft or String.PadRight
 
 <example>Wraps up a string to a Specified Length.  
 <code>
    [WrapUp("Man",4,"A")  = "ManA"]   
    [WrapUp("Man",3,"A")  = "Man".]   
    [WrapUp("Man",2,"A")  = "Man". ]
 </code>
 </example>
</summary>
</member>
<member name="M:EPRO.Library.Objects.EStrings.WrapUp(System.String,System.Int32,System.Char,System.Boolean)">

 <summary>
  If Original Length is Greater Than The Specified Length,
      Length is cut to specified lenth
  Otherwise, if less than, String is buffered with specified character. Same Function as String.PadLeft or String.PadRight
 
 <example>Wraps up a string to a Specified Length.  
 <code>
    [WrapUp("Man",4,"A")  = "ManA"]   
    [WrapUp("Man",3,"A")  = "Man".]   
    [WrapUp("Man",2,"A")  = "Ma". ]
 </code>
 </example>
</summary>
</member>
<member name="M:EPRO.Library.Objects.EStrings.CompareVersions(System.String,System.String)">
 <summary>
 Determines if Version1 precedes Version2. 
 If 1 > 2 returns 1.
 if 1 = 2 returns 0.
 if 1 &lt; 2 returns -1.
 </summary>
 <param name="version1"></param>
 <param name="version2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.splitWithoutNullElement(System.String,System.String)">
 <summary>
 Splits a string and returns result with empty string element
 </summary>
 <param name="expression"></param>
 <param name="delimiter"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.SplitChunk(System.String,System.Int32)">
 <summary>
 Split strings into chunkSize
 </summary>
 <param name="str"></param>
 <param name="chunkSize"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.ExtractStringFromHtml(System.String,System.String,System.String,System.Double@)">
 <summary>
 Extract String from an expression using the first appearance of the limits. 
 Example: StartString = lstmessagelst ... Stop String = lst/messagelst
 </summary>
 <param name="HTMLString"></param>
 <param name="startString"></param>
 <param name="stopString"></param>
 <param name="locatePosition"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.getFirstAbbreviatedLetter(System.String,System.Boolean,System.String)">
 <summary>
 Fetch first letter of the string and abbreviate it
 </summary>
 <param name="strString"></param>
 <param name="Capitalized"></param>
 <param name="AbbvSymbol"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.FormatString(System.String,System.String[])">
 <summary>
 Uses this syntax *:=0 instead of the syntax of string.format {0}. [?Microsoft.VisualBasic.Strings.Format()] -Dont Confuse it
 </summary>
 <param name="Expression">The expression that contains</param>
 <param name="args"></param>
 <returns></returns>
 <remarks>Becareful so you dont confuse it with [?Microsoft.VisualBasic.Strings.Format()]</remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.CLEAN_UP_STRING(System.String)">
 <summary>
 Removes all non-readable characters from strings range [0 - 31]
 </summary>
 <param name="ORIGINAL_STRING"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.Reverse(System.String)">
 <summary>
 Reverse the sequence of a string from back to front
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.EncodeToFixLengthBytes(System.String)">
 <summary>
 Dont use unless necessary. 
 </summary>
 <param name="Str"></param>
 <returns>Returns * 3 the length of string</returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.Reverse_EncodeToFixLengthBytes(System.String)">
 <summary>
 Reverse the process of EncodeTOFixLengthBytes
 </summary>
 <param name="Str"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.isEscapeCharacters(System.String)">
 <summary>
 Checks if whole String is combination of escape characters like \r\n
 </summary>
 <param name="pVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.translateEscapeCharacters(System.String)">
 <summary>
 Converts Combination of escape characters to String else returns empty strings
 </summary>
 <param name="pEscapeChars"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.ConvertToBase64(System.String)">
 <summary>
 It handles exception
 </summary>
 <param name="pString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.ConvertToBase64(System.String,System.Text.Encoding)">
 <summary>
 It handles exception
 </summary>
 <param name="pString"></param>
 <param name="pEncoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.ConvertFromBase64(System.String)">
 <summary>
 It handles exception
 </summary>
 <param name="pString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EStrings.ConvertFromBase64(System.String,System.Text.Encoding)">
 <summary>
 It handles exception
 </summary>
 <param name="pString"></param>
 <param name="pEncoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Objects.EDateTime">
 <summary>
 Controls the Date Conversions [To Compare Dates, Use .Equals for better functionality]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.SpecialDateTimeFormats.STYLE1">
 <summary>
 dd/MMM/yyyy
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.SpecialDateTimeFormats.STYLE2">
 <summary>
 dd/MMM/yyyy hh:mm:ss tt
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.SpecialDateTimeFormats.STYLE3">
 <summary>
 dd/MM/yyyy
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.SpecialDateTimeFormats.STYLE4">
 <summary>
 dd/MM/yyyy hh:mm:ss tt
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormat1">
 <summary>
 General Formats understood by all platform [12/JUL/2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormat2">
 <summary>
 General Formats understood by all platform [12 JUL 2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormat3">
 <summary>
 General Formats understood by all platform [12-JUL-2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormat4">
 <summary>
 Complex Format ..Meant for display [ Monday, April 07, 2014 ]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormatsEnum.DateFormat1">
 <summary>
 [12/JUL/2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormatsEnum.DateFormat2">
 <summary>
 [12 JUL 2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormatsEnum.DateFormat3">
 <summary>
 [12-JUL-2001]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.DateFormats.DateFormatsEnum.DateFormat4">
 <summary>
 [ Monday, April 07, 2014 ]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.TimeFormatUsedWithoutSeconds">
 <summary>
 Sample [12:00 AM]
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Objects.EDateTime.TimeFormatUsedWithSeconds">
 <summary>
 12:00:00 AM
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.valueOf(System.Object)">
 <summary>
 Returns general date string if value is ok if it is nothing
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.valueOf(System.Object,EPRO.Library.Objects.EDateTime.DateFormats.DateFormatsEnum)">
 <summary>
 Returns general date string if value is ok if it is nothing
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.valueOf(EPRO.Library.Types.NullableDateTime,System.String)">
 <summary>
 It returns NULL as string if obj is NULL
 </summary>
 <param name="obj"></param>
 <param name="FormatNeeded"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.EqualsTimeWithoutDate(System.DateTime,System.DateTime)">
 <summary>
 Checks if both Time are equal without checking the Date. Just hr, min and secs
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsTime1IsGreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks if time1 is greater than time2 without checking DATE ONLY TIME. Just hr, min and secs
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsTime1IsGreaterThanOrEquals(System.DateTime,System.DateTime)">
 <summary>
 Checks if time1 is greater than time2 without checking DATE ONLY TIME. Just hr, min and secs
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsTime1HrMinsIsGreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks if time1 is greater than time2 without checking DATE ONLY TIME.  Just hr and min
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsTime1HrMinsIsGreaterThanOrEquals(System.DateTime,System.DateTime)">
 <summary>
 Checks if time1 is greater than time2 without checking DATE ONLY TIME. Just hr and min 
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.EqualsTimeHrMinsWithoutDate(System.DateTime,System.DateTime)">
 <summary>
 Checks if both Time are equal without checking the Date. Just hr and min 
 </summary>
 <param name="pTime1"></param>
 <param name="pTime2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsDateTime1GreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks both date and time components for comparisons
 </summary>
 <param name="Date1"></param>
 <param name="Date2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.EqualsDateWithoutTime(System.DateTime,System.DateTime)">
 <summary>
 Checks if both date are equal without checking the time. Just Day, Month and Year
 </summary>
 <param name="Date1"></param>
 <param name="Date2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsDate1IsGreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks if dat1 is greater than date2 without checking time ONLY Date. Just Day, Month and Year
 </summary>
 <param name="Date1"></param>
 <param name="Date2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsDate1IsGreaterThanOrEquals(System.DateTime,System.DateTime)">
 <summary>
 Checks if dat1 is greater than date2 without checking time ONLY Date. Just Day, Month and Year
 </summary>
 <param name="Date1"></param>
 <param name="Date2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.GetTimeDifferenceInMilliseconds(System.DateTime,System.DateTime)">
 <summary>
 Get the time difference in Milliseconds [1 sec = 1000 ms]
 </summary>
 <param name="LowerTime"></param>
 <param name="HigherTime"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.ConvertSecsToHrsMinsSecs(System.Int64)">
 <summary>
 Convert Secs to Hr:MM:Secs
 </summary>
 <param name="Secs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.ConvertSecsToString(System.Int64)">
 <summary>
 Convert Secs to Hr:MM
 </summary>
 <param name="Secs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getHours(System.Int64)">
 <summary>
 Get Hours From Secs
 </summary>
 <param name="Secs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getHours(System.DateTime)">
 <summary>
 Get Hours From Date [Same as Hour() function]
 </summary>
 <param name="LimitedTime">Limited to 24 hrs .. specifically 23hrs 59mins</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getMins(System.Int64)">
 <summary>
 Get Mins From Secs
 </summary>
 <param name="Secs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getMins(System.DateTime)">
 <summary>
 Get Mins From Date [Same as Minute() function]
 </summary>
 <param name="LimitedTime">Limited to 24 hrs .. specifically 23hrs 59mins</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getSecs(System.Int32)">
 <summary>
 Get Secs From Hours
 </summary>
 <param name="Hrs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getSecs(System.Int64)">
 <summary>
 Get Secs From Mins
 </summary>
 <param name="Mins"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.AddDayWithTime(System.DateTime,System.DateTime)">
 <summary>
 Joins An instance of date with time. 
 </summary>
 <param name="sDate"></param>
 <param name="sTime"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.AddDayDateWithTimeDate(System.DateTime,System.DateTime)">
 <summary>
 Format day date and then join it with the formatted timeDate
 </summary>
 <param name="sDate"></param>
 <param name="sTime"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.FormatLongTime(System.Boolean)">
 <summary>
 Format Now and Returns a 12Hr Time Format ['"hh : mm: ss tt"]
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.getAMPM(System.DateTime)">
 <summary>
 Get if it is AM or PM
 </summary>
 <param name="dTime"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.Get_First_Day_In_A_Week_Of_a_PointerDay(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
 <summary>
 Fecthes first day from a week. Like I want mon from the same week today falls in .. Using the Pointer day
 </summary>
 <param name="ptrDay">A day in the week</param>
 <param name="WkStartingDay">The first day you want from the week</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.Get_A_Specific_Day_In_A_Week_Using_a_PointerDay(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstDayOfWeek)">
 <summary>
 Fecthes a day from a week. Like I want mon from the same week today falls in .. starting from a day
 </summary>
 <param name="ptrDay">A day in the week</param>
 <param name="WkStartingDay">The day that connotes the starting of the week</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.Get_First_Day_In_THE_MONTH_Of_a_PointerDay(System.DateTime)">
 <summary>
 Fecthes first day from a Month.  Using the Pointer day
 </summary>
 <param name="ptrDay">A day in the month </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.Get_Last_Day_In_THE_MONTH_Of_a_PointerDay(System.DateTime)">
 <summary>
 Fecthes Last day from a Month.  Using the Pointer day
 </summary>
 <param name="ptrDay">A day in the month </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsDayBetweenIncludingBothEndPoints(System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 Checks if day is between both endpoints or equal to either of them
 </summary>
 <param name="pDay"></param>
 <param name="pStartDay"></param>
 <param name="pEndDay"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EDateTime.IsDayBetweenWithoutBothEndPoints(System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 Checks if day is between the specified start day and end day without including both end points
 </summary>
 <param name="pDay"></param>
 <param name="pStartDay"></param>
 <param name="pEndDay"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EBoolean.valueOf(System.Object)">
 <summary>
 Converts An Object to Boolean
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EBoolean.valueOf(System.String)">
 <summary>
 Converts Both Integer String to Boolean. Like "123" AND "TRUE" OR "FALSE" 
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EBoolean.valueOf(System.Int16)">
 <summary>
 Converts Both Integer String to Boolean. Like "123" AND "TRUE" OR "FALSE" 
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EBoolean.valueOf(System.Int64)">
 <summary>
 Converts Both Integer String to Boolean. Like "123" AND "TRUE" OR "FASLSE" 
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EBoolean.valueOf(System.Boolean)">
 <summary>
 Converts A  Boolean to Boolean
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.ELong.valueOf(System.String)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.ELong.valueOf(System.DBNull)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.ELong.valueOf(System.Double)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.ELong.valueOf(System.Decimal)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EInt.valueOf(System.String)">
 <summary>
 Converts An Object to long
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EInt.valueOf(System.DBNull)">
 <summary>
 Converts An Object to int32
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EInt.valueOf(System.Double)">
 <summary>
 Converts An Object to int32
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EInt.valueOf(System.Decimal)">
 <summary>
 Converts An Object to int32
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EInt.valueOf(System.Object)">
 <summary>
 Converts objects to integer
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.SaveImage_To_File(System.Drawing.Image,System.String)">
 <summary>
 To solve the issue with image saving not being able to decern it's format
 </summary>
 <param name="Img"></param>
 <param name="FilePath">The real output is Bitmaps(bmp)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.get_Icon_From_Object_Type(System.Type)">
 <summary>
 Get Icon from application type
 </summary>
 <param name="objType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.toByteArray(System.Drawing.Image)">
 <summary>
 It doesnt throw exception
 </summary>
 <param name="pImage"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.toBase64String(System.Byte[])">
 <summary>
 It doesnt throw exception
 </summary>
 <param name="pBytesFile"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.toBase64String(System.Drawing.Image)">
 <summary>
 It doesnt throw exception
 </summary>
 <param name="pImage"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Objects.EImage.fromBase64String(System.String)">
 <summary>
 It doesnt throw exception
 </summary>
 <param name="pBase64Data">Dont add the decoding data [data:image/gif;base64,]</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.getOSCultureInstalledOnPC">
 <summary>
 Throws Exception Exception for not supported
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.getOSCultureForCurrentThread">
 <summary>
 Throws Exception Exception for not supported
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.getClassCultureSummary">
 <summary>
 The summary of the OS Current UI Culture on this calling thread. It is usually same if user didn't create specific culture using  CultureInfo.CreateSpecificCulture("fr-FR")
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.getCurrentThreadCultureSummary">
 <summary>
 The summary of the OS Current UI Culture on this calling thread. It is usually same if user didn't create specific culture using  CultureInfo.CreateSpecificCulture("fr-FR")
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.getInstalledCultureSummary">
 <summary>
 The summary of the OS Installed Culture
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.#ctor">
 <summary>
 Use ENGLISH___________USA 
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.MicrosoftOS.OSCulture.#ctor(EPRO.Library.MicrosoftOS.OSCulture.Cultures)">
 <summary>
 If unknown is specified it switches to English
 </summary>
 <param name="pCulture"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.IsDateTimeGreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks both date time components
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.IsDateTimeLessThan(System.DateTime,System.DateTime)">
 <summary>
 Checks both date time components
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.IsGreaterThan(System.DateTime,System.DateTime)">
 <summary>
 Checks date component only not the time
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.IsLessThan(System.DateTime,System.DateTime)">
 <summary>
 Checks date component only not the time
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.ToggleValue(System.Int32,System.Int32,System.Int32)">
 <summary>
 Toggles Integer Values e.g betw
 </summary>
 <param name="current"></param>
 <param name="min"></param>
 <param name="max"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.toShort(System.Object)">
 <summary>
 Converts an Any Object to Short Type
 </summary>
 <param name="val"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.toBoolean(System.Object)">
 <summary>
 Converts an Any Object to Boolean
 </summary>
 <param name="val"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.Like(System.String,System.String)">
 <summary>
 Checks if String2 is in String1 Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.LikeIgnoreCase(System.String,System.String)">
 <summary>
 Checks if String2 is in String1 Ignoring the Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.equalsIgnoreCase(System.String,System.String)">
 <summary>
 Checks if String1 equals String2 Ignoring the Case Sensitivity
 </summary>
 <param name="str1"></param>
 <param name="str2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basExtensions.toProperCase(System.String)">
 <summary>
 Converts to Proper Case
 </summary>
 <param name="pStr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basObjectNarrator.GetVariableFullName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
 <summary>
 Usage: VB: Function() variableName, C# ()=> variableName
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basObjectNarrator.GetVariableName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
 <summary>
 Usage: VB: Function() variableName, C# ()=> variableName
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basObjectNarrator.GetMethodFullName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
 <summary>
 Usage: Function() Me.MethodName(). if there is param, pass null
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.Modules.basObjectNarrator.GetMethodName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
 <summary>
 Usage: Function() Me.MethodName(). if there is param, pass null
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.TimerCore.SecsCounterBasic">
 <summary>
 Not reusable. Only initialize and dispose. Also, it doesnt handle cross-threading
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.#ctor(System.Int64)">
 <summary>
 Not reusable. Only initialize and dispose. Also, it doesnt handle cross-threading
 </summary>
 <param name="MinsToCountTo"></param>
 <remarks></remarks>
</member>
<member name="E:EPRO.Library.TimerCore.SecsCounterBasic.onDayChanged">
 <summary>
 It auto reset the day to new date after calling this event
 </summary>
 <param name="sender"></param>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.TimerCore.SecsCounterBasic._____onMinuteIncrement___OccurringAction">
 <summary>
 This is the same thing Other big intervals will use
 </summary>
 <remarks></remarks>
</member>
<member name="P:EPRO.Library.TimerCore.SecsCounterBasic.PreviousStartedDateTime">
 <summary>
 Contains the previous date time before the Started Time in this class changed. 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Start">
 <summary>
 Only used once
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Set_____onSecondIncrement___OccurringAction(EPRO.Library.TimerCore.SecsCounterBasic.RecurringThreadAction)">
 <summary>
 Use to explain which action the thread delivering this event should take if it is blocked (In-Use) on the client side
 </summary>
 <param name="pRecurringThreadAction"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Set_____onMinuteIncrement___OccurringAction(EPRO.Library.TimerCore.SecsCounterBasic.RecurringThreadAction)">
 <summary>
 Use to explain which action the thread delivering this event should take if it is blocked (In-Use) on the client side
 </summary>
 <param name="pRecurringThreadAction"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Set_____onTimeLeft___OccurringAction(EPRO.Library.TimerCore.SecsCounterBasic.RecurringThreadAction)">
 <summary>
 Use to explain which action the thread delivering this event should take if it is blocked (In-Use) on the client side
 </summary>
 <param name="pRecurringThreadAction"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Set_____onDayChanged___OccurringAction(EPRO.Library.TimerCore.SecsCounterBasic.RecurringThreadAction)">
 <summary>
 Use to explain which action the thread delivering this event should take if it is blocked (In-Use) on the client side
 </summary>
 <param name="pRecurringThreadAction"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.TimerCore.SecsCounterBasic.Set____CustomSecsLeftAlert__Intervals(System.Int64[])">
 <summary>
 Use to set at which seconds you want this class to raise Time Left. 
 Also, you can set what action the thread will take using Set_____onTimeLeft___OccurringAction
 </summary>
 <param name="p____CustomSecsLeftAlert"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates">
 <summary>
 Contains Different Delegate Definitions. Delegates is like const .. They dont need shared specifier. Once public
 They are available
 </summary>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateBoolFunc">
 <summary>
 Takes a string Parameter and returns boolean
 </summary>
 <param name="strParam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateSubString">
 <summary>
 Takes a string Parameter and returns Nothing
 </summary>
 <param name="strParam"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateSubBool">
 <summary>
 Takes a boolean Parameter and returns Nothing
 </summary>
 <param name="strParam"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateSubBoolThread">
 <summary>
 Takes a boolean Parameter,Thread Parameter and returns Nothing
 </summary>
 <param name="strParam"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateSubThread">
 <summary>
 Takes a boolean Parameter and returns Nothing
 </summary>
 <param name="strParam"></param>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.EDelegates.delegateNoParam">
 <summary>
 Collects No Parameters
 </summary>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.Types.NullableDateTime">
 <summary>
 A type that can hold both date and Nothing[Null] produces Date or NULL String
 </summary>
 <remarks></remarks>
</member>
<member name="F:EPRO.Library.Types.NullableDateTime.NULL_RETURN">
 <summary>
 the value it returns instead of nothing
 </summary>
 <remarks></remarks>
</member>
<member name="P:EPRO.Library.Types.NullableDateTime.DateTimeValueOrNULL">
 <summary>
 returns DateTimeValue if it is not null else returns NULL string 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:EPRO.Library.Types.NullableDateTime.DateTimeValueOrNothing">
 <summary>
 returns DateTimeValue if it is not null else returns NULL object (NOTHING) 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:EPRO.Library.EIO">
 <summary>
 Static Class for I/O functions
 </summary>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.DeleteAllFromDirectory(System.String)">
 <summary>
 Try to empty a directory withought deleting the directory itself
 </summary>
 <param name="direc"></param>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.DeleteDirectory(System.String)">
 <summary>
 Deletes a directory and all its contents if exist. It ignores error on delete
 </summary>
 <param name="DirectoryPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.DeleteAndRecreateDirectory(System.String)">
 <summary>
 Deletes a directory and all its contents if exist and recreate it as empty directory. Creates new if it doesnt exist
 </summary>
 <param name="DirectoryPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.DeleteFileIfExists(System.String)">
 <summary>
 Deletes a file if it exists
 </summary>
 <param name="_FileName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.GetFileExtension(System.String)">
 <summary>
 Gets the extension of a file. It returns (.) with the extension name
 </summary>
 <param name="__FileName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.GetDirectoryName(System.String,System.Boolean)">
 <summary>
 Fetches the directory name.. using backward slash. Only the current directoy like [MyFolder] is returned not full directory
 </summary>
 <param name="DirectoryPath"></param>
 <param name="IncludeSlash"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.getDirectoryFullPath(System.String)">
 <summary>
 Get's a directory full path from a file full path
 </summary>
 <param name="FilePath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.getFileNameWithoutExtension(System.String)">
 <summary>
 Get a file name without extension
 </summary>
 <param name="__FileName">a File Name without the full path</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.getFileName(System.Uri)">
 <summary>
 Get the file name in the provided uri
 </summary>
 <param name="uri"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.getFileName(System.String)">
 <summary>
 Get the file name in the provided uri
 </summary>
 <param name="URL"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.suggestFileUniqueFullFilePathName(System.String,System.String)">
 <summary>
 get a suggested file full path name. like c:\...File.txt, c:\...File___1.txt
 </summary>
 <param name="pIntendedFileFullPath">the intended file name</param>
 <param name="pIncrementSeparator">if you want a separator between filename and increment. NB: Increment must be file naming compatible.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.suggestFileUniqueFullFilePathName(System.String,System.String,System.String)">
 <summary>
 get a suggested file full path name. like c:\...File.txt, c:\...File___1.txt
 </summary>
 <param name="pIntendedFileFolderWithBackSlash">The directory you wish to create the file in with back slash C:\</param>
 <param name="intendedFileName">the intended file name</param>
 <param name="IncrementSeparator">if you want a separator between filename and increment. NB: Increment must be file naming compatible.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.getAvailableFileName(System.String,System.String)">
 <summary>
 Scan a directory for available file name you can use and returns full path of the available file name
 </summary>
 <param name="FolderPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.get_Code_File_StartUp_File_FullPathName(System.Type)">
 <summary>
 Return the File path with the file name for the type that was sent
 </summary>
 <param name="objType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.get_Code_File_StartUp_Path(System.Type)">
 <summary>
 Return the Only File path WITHOUT the file name for the type that was sent
 </summary>
 <param name="objType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.get_GUID_From_File(System.String)">
 <summary>
 Loads a File (.exe,.dll) and reads it Assembly for GUID attributes
 </summary>
 <param name="FilePath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.isFolderWritableAndReadable(System.String)">
 <summary>
 Confirms if a directory is writable by this current application. [If it has the access level]
 </summary>
 <param name="FolderPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.isThis_a_file(System.String)">
 <summary>
 Checks if this a file by checking File.GetAttributes(__FileName) NOT Equals FileAttributes.Directory
 </summary>
 <param name="__FileName">a File Name without the full path</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.WriteToFileSOAP(System.Object,System.String)">
 <summary>
 Writes Serializable Object to File. Throws all exceptions
 </summary>
 <param name="obj"></param>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.ReadFromFileSOAP``1(System.String)">
 <summary>
 Reads a serialized object from file. Throws all exceptions
 </summary>
 <typeparam name="T"></typeparam>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.WriteToFile(System.Object,System.String)">
 <summary>
 Writes Serializable Object to File. Throws all exceptions
 </summary>
 <param name="obj"></param>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.ReadFromFile``1(System.String)">
 <summary>
 Reads a serialized object from file. Throws all exceptions
 </summary>
 <typeparam name="T"></typeparam>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.WriteToFileXML``1(``0,System.String)">
 <summary>
 Writes Serializable Object to File. Throws all exceptions
 </summary>
 <param name="obj"></param>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.ReadFromFileXML``1(System.String)">
 <summary>
 Reads a serialized object from file. Throws all exceptions
 </summary>
 <typeparam name="T"></typeparam>
 <param name="FileFullPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.CopyFile(System.String,System.String,System.Boolean)">
 <summary>
 Safely copies a file from one destination to another by making sure destination folder exists. Throws other exception. 
 It creates the destination directory if it doesn't exists. 
 </summary>
 <param name="src">Source File Full Path</param>
 <param name="dst">Destination File Full Path</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EIO.CopyFileToDir(System.String,System.String,System.Boolean)">
 <summary>
 Safely copies a file from one destination (directory specified) to another by making sure destination folder exists. Throws other exception.
 It creates the destination directory if it doesn't exists. 
 </summary>
 <param name="src">Source file full path</param>
 <param name="dstDir">Destination Directory</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EMaths.Convert_Turkish_Decimal_to_Eng(System.String)">
 <summary>
 Pure decimal NOT string formatted. e.g. 9998,00 or 9998.00
 </summary>
 <param name="xTurkishEntry"></param>
 <returns>String because if the OS is Turkish and I use inbuilt format it will still be in Turkish</returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EMaths.getReadableByteValue(System.Int64)">
 <summary>
 Writes a Byte Value in Kb, Mb etc
 </summary>
 <param name="ByteValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EMaths.AlternateBit(System.Byte)">
 <summary>
 Alternate Bit Value. If 0 returns 1.. If 1 returns 0
 </summary>
 <param name="BitVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EMaths.getANumberBetween(System.Int32,System.Int32)">
 <summary>
 Fetches a number between the specified range
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:EPRO.Library.EMaths.getIntegerPortionOf(System.String)">
 <summary>
 Fetch the Integer Portion ONLY of a Value.. NB: Sign is included
 </summary>
 <param name="dblVal"></param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
